import socket, re
from math import gcd
from functools import reduce

HOST = "litctf.org"
PORT = 31789

def recv_until(sock, end=b": "):
    data = b""
    while not data.endswith(end):
        chunk = sock.recv(1)
        if not chunk:
            break
        data += chunk
    return data

def sendline(sock, line: str):
    sock.sendall(line.encode() + b"\n")

def collect_results(start=10**9, count=8):
    results, xs = [], []
    sock = socket.create_connection((HOST, PORT))
    for i in range(count):
        recv_until(sock, b": ")
        sendline(sock, str(start+i))
        out = sock.recv(4096).decode(errors="ignore")
        if "Too small" in out:
            print("Too small, coba start lebih besar")
            break
        m = re.search(r"(\d+)", out)
        if m:
            results.append(int(m.group(1)))
            xs.append(start+i)
            print(f"x={start+i}, dapat {len(m.group(1))} digit")
    sock.close()
    return xs, results

def compute_gcd(results):
    cands = []
    for i in range(len(results)-2):
        r1,r2,r3 = results[i],results[i+1],results[i+2]
        cands.append(abs(r2*r2 - r1*r3))
    return reduce(gcd, cands)

# === Main exploit ===
xs, results = collect_results(start=10**12, count=12)  # start besar biar tidak "Too small"
n_guess = compute_gcd(results)
print("n_guess bit_length:", n_guess.bit_length())

# connect lagi untuk submit guess
sock = socket.create_connection((HOST, PORT))
recv_until(sock, b": ")
sendline(sock, "guess")
recv_until(sock, b"? ")
sendline(sock, str(n_guess))
print(sock.recv(4096).decode(errors="ignore"))
sock.close()
